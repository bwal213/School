Problem 1:

For this problem, I needed to decide how I would make sure I wouldn't use duplicate cards. I did this by manually defining the cards as a public variable. Once I had that defined, I could then reference to it from a number, so I would only need to generate numbers in a random sequence, and not reorganize an array. To keep thins more closely related to dealing cards, cards are dealt out at a spaceing of the input number, so that it would simulate how real dealing is done. From this I had some issues with making sure that the input was only an int, and not more than 10, since there are only 52 cards. One issue forced me to need to rebuild the project in a new directory, as the old one stopped working due to files added manually during the development. Efficiencies could be gained in a few areas, like generating the card positions, there is a potential for an extremely long delay if it can't randomly generate the cards correctly; This could be corrected by forcing the last 10 or so to just be filled in, in an alternating fasion to maintain more of a shuffle pattern. Also some extra code may be included from the project rebuild issue, it was seeming like the input was causing a crash, but it was not. I had tried a few things to get this to work, my final attempt, which I knew should have worked is what is left.

Problem 2:

For this problem, I knew I would need some time of backend formatting from the start. Since Strings are hard to work with getting proper formatting during output, I opted to put the string of the character pre-formatted in the array, then output it at the end. This allows me to simplify the output section. However as I found, the String formatting and putting it into the array was more difficult than I had hoped. However since I knew where what character of the time I would be working with in its string, I just used that with aditional positioning math to get everything set right. I realized that some of the positiong wasn't quite right, and had to make all character ascii Strings longer so that each character block would be 5 characters wide, which did provide some formatting issues. This could be corrected, but in the essences of faster solving, it didn't seem necessary.

Problem 3:

For this problem, I came into it with less of a plan than usual. I started by trying to get an idea of how zellers formula worked. My original findings worked for initial testing, so I was able to get a basic program running with it. However once I needed to make sure that the display would work, I found that I needed to use the formula from wikipedia, rather than my original one I was using. With this I was able to start working on the output, and did not write this neatly. For some methods to work, I just defined the new variables then passed them, instead of using an object like I probably should have. Once I was convinced that the month setup was correct, I made sure I had proper month lengths and names available, and moved into display beautifying mode. I found that much of the position with this needed to know the day the month started on, as well as the day I would be displaying. Getting the formatting close was a bit tricky, but without having extra information about how it is supposed to function, I made it look nearly identical as the example given. With that it was pretty well done, I did more testing to check if it handled leap years correctly and found it did, just forgot to adjust how I was displaying the year for this. So, for now, It should be as good as I can get it.